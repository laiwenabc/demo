var devActs, buildActs, name, index, buildName;
// 所有项目，如果是 null 的话，则是全部
var projects = ['zigong-setpraise-1701'];
 
// 要启动或者打包的项目，如果为 -1 则打包全部，并且打包后的名称为默认名称
index = 0;
// 当 index = -1 的时候，默认为该名称
var defaultPageName = 'showcase';

// 获取 npm 输入的项目
try {
    var myConf = JSON.parse(process.env.npm_config_argv);
    // 获取 npm 之后的项目，例如  npm run dev demo1 demo2 -showcase 结果是 ['demo1','demo2']
    var prodArrs = myConf.remain;
    // 获取所有 npm 之后的数组，例如  npm run dev demo1 demo2 -showcase 结果是 ['run','dev',demo1','demo2','-showcase']
    var argvArrs = myConf.original;

    // 项目配置数组
    var buildArrs = [];
    if (prodArrs != null && prodArrs.length > 0) {
        projects = prodArrs;
        index = 0;
    }

    // 打包名称
    var myZipName = argvArrs[argvArrs.length - 1];
    if (myZipName.indexOf('-') == 0 && myZipName.length > 1) {
        buildName = myZipName.substr(1);
    }
} catch (e) {
    console.log(e.message);
}

// 判断空数组
if (projects == null || projects.length == 0) {
    projects = null;
    index = -1;
}

// dev 下要启动的项目 
devActs = index == -1 ? projects : projects[index];

// stg build 下要打包的项目，可以是字符串或者数组
buildActs = index == -1 ? projects : projects[index];

// 项目名称，打包后的名称
name = buildName == null ? (index == -1 ? defaultPageName : projects[index]) : buildName;

// 要打包的项目
var actNames = null;
if (process.env.nodeEnv == 'dev') {
    actNames = devActs == null ? null : typeof devActs == 'string' ? devActs : devActs.join(',');
} else {
    actNames = buildActs == null ? null : typeof buildActs == 'string' ? buildActs : buildActs.join(',');
}

var config = {
    // 打包后的文件命名
    'zipName': name,
    // 静态文件路径
    'publicPathKey': 'showcase',
    // 项目 代表要启动的项目和打包的项目，不配置默认全部项目
    // 'actNames': 'demo,demo1,demo2'
    'actNames': actNames,
    // hyper js
    'hyper': {
        'dev': 'local.',
        'stg': '',
        'production': ''
    },
    // 是否图片压缩
    'imagemin': {
        'stg': true,
        'production': true
    },
    // 压缩质量
    'imageminq': {
        'stg': '65-80',
        'production': '65-80'
    },
    // 是否需要压缩打包文件
    'ismin': {
        'stg': true,
        'production': true
    },
    // 是否需要 mock 数据
    'ismock': {
        'stg': false,
        'production': false
    },
    // 端口
    'port': 4000,
    // dev 环境下是否需要 babel 解析
    'babel': true
};

// 静态文件配置
var publicPath = {
    'showcase': {
        'dev': '/',
        'stg': '/dmz/' + name + '/',
        'production': '/dmz/' + name + '/'
    }
};

// 默认配置
var defConfig = {
    'dev': '/',
    'stg': '/',
    'production': '/'
};

config.publicPath = publicPath[config.publicPathKey];
config.publicPath = config.publicPath == null ? defConfig : config.publicPath;
module.exports = config;
